// Generated by CoffeeScript 1.7.1
(function() {
  var d, get_item_state, get_label_for_input_id, handle_input_click, input_ids, kill_event, load_state, render_item, save_state, to_array, update_input_render_state;

  d = document;

  input_ids = ['first', 'second', 'third'];

  to_array = function(sequential_thing) {
    return Array.prototype.slice.call(sequential_thing);
  };

  kill_event = function(event) {
    event.preventDefault();
    return event.stopPropagation();
  };

  get_label_for_input_id = function(input_id) {
    return d.getElementById(input_id + '_label');
  };

  update_input_render_state = function(input) {
    var label;
    label = get_label_for_input_id(input.id);
    return label.style.textDecoration = input.checked ? 'line-through' : '';
  };

  handle_input_click = function(event) {
    update_input_render_state(event.target);
    return save_state();
  };

  get_item_state = function(input_id) {
    var input, label;
    input = d.getElementById(input_id);
    label = get_label_for_input_id(input_id);
    return {
      checked: input.checked,
      goal: label.firstChild ? label.firstChild.nodeValue : ''
    };
  };

  save_state = function() {
    var id, today;
    today = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = input_ids.length; _i < _len; _i++) {
        id = input_ids[_i];
        _results.push(get_item_state(id));
      }
      return _results;
    })();
    localStorage.setItem('today', JSON.stringify(today));
    return console.log('Saved state:', today);
  };

  render_item = function(item, position) {
    var input, input_id, label;
    input_id = input_ids[position];
    input = d.getElementById(input_id);
    label = get_label_for_input_id(input_id);
    if (label.firstChild) {
      label.firstChild.nodeValue = item.goal;
    } else {
      label.appendChild(d.createTextNode(item.goal));
    }
    input.checked = item.checked;
    return update_input_render_state(input);
  };

  load_state = function() {
    var i, item, today, today_json, _i, _len, _results;
    today_json = localStorage.getItem('today');
    if (today_json !== null) {
      today = JSON.parse(today_json);
      console.log('Loaded state', today);
      _results = [];
      for (i = _i = 0, _len = today.length; _i < _len; i = ++_i) {
        item = today[i];
        _results.push(render_item(item, i));
      }
      return _results;
    } else {
      return console.log('State not present in localStorage');
    }
  };

  d.addEventListener('DOMContentLoaded', function() {
    var get_labels, input, label, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    load_state();
    get_labels = function() {
      return to_array(d.getElementsByTagName('label'));
    };
    _ref = get_labels();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      label = _ref[_i];
      label.addEventListener('click', kill_event);
    }
    _ref1 = get_labels();
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      label = _ref1[_j];
      label.addEventListener('blur', save_state);
    }
    _ref2 = to_array(d.getElementsByTagName('input'));
    _results = [];
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      input = _ref2[_k];
      _results.push(input.addEventListener('click', handle_input_click));
    }
    return _results;
  });

}).call(this);
