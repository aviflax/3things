// Generated by CoffeeScript 1.7.1
(function() {
  var archive_thingset, clear_and_render_prior, clear_prior_things, current_iso_date, d, get_checkbox, get_current_thingset_state, get_text_input, get_thing_state, get_today_thingset, handle_checkbox_change, input_ids, is_current_day, load_state, prior_thing_to_li, render_current_state, render_prior_things, render_prior_thingset, render_thing, reset_thing, reset_ui, save_current_state, to_array, update_and_save, update_input_render_state, update_today_list_date;

  d = document;

  input_ids = ['first', 'second', 'third'];

  to_array = function(sequential_thing) {
    return Array.prototype.slice.call(sequential_thing);
  };

  current_iso_date = function() {
    return (new Date()).toISOString();
  };

  update_input_render_state = function(checkbox) {
    var text_input;
    text_input = checkbox.nextSibling;
    if (checkbox.checked) {
      return text_input.classList.add('completed');
    } else {
      return text_input.classList.remove('completed');
    }
  };

  handle_checkbox_change = function(event) {
    var checkbox;
    checkbox = event.target;
    update_input_render_state(checkbox);
    if (checkbox.checked) {
      checkbox.dataset.date_time_completed = current_iso_date();
    } else {
      delete checkbox.dataset.date_time_completed;
    }
    return save_current_state();
  };

  get_checkbox = function(i) {
    return d.getElementById(input_ids[i] + '_status');
  };

  get_text_input = function(i) {
    return d.getElementById(input_ids[i] + '_text');
  };

  get_today_thingset = function() {
    return d.getElementById('today_things');
  };

  get_thing_state = function(i) {
    return {
      completed: get_checkbox(i).checked,
      date_time_completed: get_checkbox(i).dataset.date_time_completed || null,
      text: get_text_input(i).value
    };
  };

  get_current_thingset_state = function() {
    var i;
    return {
      things: (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 2; i = ++_i) {
          _results.push(get_thing_state(i));
        }
        return _results;
      })(),
      date: get_today_thingset().dataset.date
    };
  };

  save_current_state = function() {
    var current;
    current = get_current_thingset_state();
    localStorage.setItem('current', JSON.stringify(current));
    return console.log('Saved state:', current);
  };

  update_today_list_date = function() {
    console.log('Setting todayâ€™s list to current date');
    return get_today_thingset().dataset.date = current_iso_date();
  };

  update_and_save = function() {
    update_today_list_date();
    return save_current_state();
  };

  render_thing = function(thing, i) {
    var checkbox;
    get_text_input(i).value = thing.text;
    checkbox = get_checkbox(i);
    checkbox.checked = thing.completed;
    return update_input_render_state(checkbox);
  };

  load_state = function(which) {
    var json, state;
    json = localStorage.getItem(which);
    if (json !== null) {
      state = JSON.parse(json);
      console.log('loaded', which, 'state from localStorage', state);
      return state;
    } else {
      console.log('state', which, 'not present in localStorage');
      return null;
    }
  };

  render_current_state = function(state) {
    var i, thing, _i, _len, _ref, _results;
    get_today_thingset().dataset.date = state.date;
    _ref = state.things;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      thing = _ref[i];
      _results.push(render_thing(thing, i));
    }
    return _results;
  };

  reset_thing = function(i) {
    var checkbox, text_input;
    checkbox = get_checkbox(i);
    checkbox.checked = false;
    text_input = get_text_input(i);
    text_input.value = '';
    return text_input.style.textDecoration = '';
  };

  reset_ui = function() {
    var i, _i;
    for (i = _i = 0; _i <= 2; i = ++_i) {
      reset_thing(i);
    }
    return update_today_list_date();
  };

  archive_thingset = function(thingset) {
    var prior, prior_json;
    prior_json = localStorage.getItem('prior');
    prior = prior_json !== null ? JSON.parse(prior_json) : [];
    prior.push(thingset);
    localStorage.setItem('prior', JSON.stringify(prior));
    localStorage.removeItem('current');
    reset_ui();
    console.log('Archived current state');
    return console.log('Archive value is now:', prior);
  };

  prior_thing_to_li = function(thing) {
    var li;
    li = d.createElement('li');
    if (thing.completed) {
      li.classList.add('completed');
    }
    li.appendChild(d.createTextNode(thing.text));
    return li;
  };

  render_prior_thingset = function(thingset) {
    var details, list, prior, summary, thing, _i, _len, _ref;
    prior = d.getElementById('prior');
    details = d.createElement('details');
    summary = d.createElement('summary');
    list = d.createElement('ul');
    summary.appendChild(d.createTextNode((new Date(thingset.date)).toDateString()));
    details.appendChild(summary);
    details.appendChild(list);
    _ref = thingset.things;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      thing = _ref[_i];
      list.appendChild(prior_thing_to_li(thing));
    }
    return prior.insertBefore(details, prior.firstChild);
  };

  clear_prior_things = function() {
    var child, details, _i, _len, _ref, _results;
    details = d.getElementById('prior');
    _ref = to_array(details.getElementsByTagName('details')).slice(0, -1);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      _results.push(details.removeChild(child));
    }
    return _results;
  };

  render_prior_things = function(prior_things) {
    var thingset, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = prior_things.length; _i < _len; _i++) {
      thingset = prior_things[_i];
      _results.push(render_prior_thingset(thingset));
    }
    return _results;
  };

  is_current_day = function(date) {
    return (new Date()).getDay() === date.getDay();
  };

  clear_and_render_prior = function() {
    var prior_state;
    clear_prior_things();
    prior_state = load_state('prior');
    if (prior_state !== null) {
      return render_prior_things(prior_state);
    }
  };

  d.addEventListener('DOMContentLoaded', function() {
    var current_state, input, inputs, _i, _j, _k, _len, _len1, _len2;
    current_state = load_state('current');
    if (current_state && !is_current_day(new Date(current_state.date))) {
      archive_thingset(current_state);
    } else if (current_state) {
      if (current_state !== null) {
        render_current_state(current_state);
      }
    }
    setInterval((function() {
      if (!is_current_day(new Date(get_today_thingset().dataset.date))) {
        archive_thingset(get_current_thingset_state());
        return clear_and_render_prior();
      }
    }), 60000);
    inputs = to_array(d.getElementsByTagName('input'));
    for (_i = 0, _len = inputs.length; _i < _len; _i++) {
      input = inputs[_i];
      input.addEventListener('change', update_and_save);
    }
    for (_j = 0, _len1 = inputs.length; _j < _len1; _j++) {
      input = inputs[_j];
      if (input.type === 'text') {
        input.addEventListener('keypress', update_and_save);
      }
    }
    for (_k = 0, _len2 = inputs.length; _k < _len2; _k++) {
      input = inputs[_k];
      if (input.type === 'checkbox') {
        input.addEventListener('change', handle_checkbox_change);
      }
    }
    return clear_and_render_prior();
  });

}).call(this);
