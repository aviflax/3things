// Generated by CoffeeScript 1.7.1
(function() {
  var current_iso_date, d, get_checkbox, get_text_input, get_thing_state, get_today_thingset, handle_checkbox_change, input_ids, load_state, render_state, render_thing, save_state, to_array, update_and_save, update_input_render_state, update_today_list_date;

  d = document;

  input_ids = ['first', 'second', 'third'];

  to_array = function(sequential_thing) {
    return Array.prototype.slice.call(sequential_thing);
  };

  current_iso_date = function() {
    return (new Date()).toISOString();
  };

  update_input_render_state = function(checkbox) {
    var text_input;
    text_input = checkbox.nextSibling;
    return text_input.style.textDecoration = checkbox.checked ? 'line-through' : '';
  };

  handle_checkbox_change = function(event) {
    var checkbox;
    checkbox = event.target;
    update_input_render_state(checkbox);
    if (checkbox.checked) {
      checkbox.dataset.date_time_completed = current_iso_date();
    } else {
      delete checkbox.dataset.date_time_completed;
    }
    return save_state();
  };

  get_checkbox = function(i) {
    return d.getElementById(input_ids[i] + '_status');
  };

  get_text_input = function(i) {
    return d.getElementById(input_ids[i] + '_text');
  };

  get_today_thingset = function() {
    return d.getElementById('today_things');
  };

  get_thing_state = function(i) {
    return {
      completed: get_checkbox(i).checked,
      date_time_completed: get_checkbox(i).dataset.date_time_completed || null,
      text: get_text_input(i).value
    };
  };

  save_state = function() {
    var current, i;
    current = {
      things: (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 2; i = ++_i) {
          _results.push(get_thing_state(i));
        }
        return _results;
      })(),
      date: get_today_thingset().dataset.date
    };
    localStorage.setItem('current', JSON.stringify(current));
    return console.log('Saved state:', current);
  };

  update_today_list_date = function() {
    console.log('Setting todayâ€™s list to current date');
    return get_today_thingset().dataset.date = current_iso_date();
  };

  update_and_save = function() {
    update_today_list_date();
    return save_state();
  };

  render_thing = function(thing, i) {
    var checkbox;
    get_text_input(i).value = thing.text;
    checkbox = get_checkbox(i);
    checkbox.checked = thing.completed;
    return update_input_render_state(checkbox);
  };

  load_state = function() {
    var current_json;
    current_json = localStorage.getItem('current');
    if (current_json !== null) {
      return JSON.parse(current_json);
    } else {
      return console.log('State not present in localStorage');
    }
  };

  render_state = function(state) {
    var i, thing, _i, _len, _ref, _results;
    get_today_thingset().dataset.date = state.date;
    _ref = state.things;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      thing = _ref[i];
      _results.push(render_thing(thing, i));
    }
    return _results;
  };

  d.addEventListener('DOMContentLoaded', function() {
    var input, inputs, _i, _j, _k, _len, _len1, _len2, _results;
    render_state(load_state());
    inputs = to_array(d.getElementsByTagName('input'));
    for (_i = 0, _len = inputs.length; _i < _len; _i++) {
      input = inputs[_i];
      input.addEventListener('change', update_and_save);
    }
    for (_j = 0, _len1 = inputs.length; _j < _len1; _j++) {
      input = inputs[_j];
      if (input.type === 'text') {
        input.addEventListener('keypress', update_and_save);
      }
    }
    _results = [];
    for (_k = 0, _len2 = inputs.length; _k < _len2; _k++) {
      input = inputs[_k];
      if (input.type === 'checkbox') {
        _results.push(input.addEventListener('change', handle_checkbox_change));
      }
    }
    return _results;
  });

}).call(this);
